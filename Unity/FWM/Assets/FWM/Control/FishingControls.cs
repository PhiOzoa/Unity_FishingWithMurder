//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/FWM/Control/FishingControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FishingControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FishingControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FishingControls"",
    ""maps"": [
        {
            ""name"": ""Hook"",
            ""id"": ""41555246-2f4f-46a3-b2c0-6829836a2632"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9d7d8813-2fd6-445d-86b4-409a529c9169"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tug"",
                    ""type"": ""Button"",
                    ""id"": ""c76cb370-945a-42bb-bc2c-037125424d30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Raise"",
                    ""type"": ""Button"",
                    ""id"": ""b15572fa-a6fe-458f-9eef-760e3bab68c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeaveFishing"",
                    ""type"": ""Button"",
                    ""id"": ""2b46f4dd-c9b4-4576-9a2c-27969019cdb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""86e074e2-80b3-4f22-b1cd-99482966cd76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f525ff2-f474-43b4-b58e-36179130a750"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e8764df-5d52-4700-aee6-30c66dbd3ba6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""36ae81df-5823-4222-9617-6001f5dbceaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b309053f-d0b2-4111-a963-d10c789a74ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad Left Joystick"",
                    ""id"": ""17b32dd3-72d9-4a58-b0e2-fbdc49206e01"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e16aad1d-4853-4d3d-be5d-e6f7502e9233"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""55fdfbba-4949-43b4-8727-60f914bb1de8"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f86c5615-fe3e-4386-98b7-ff10d279eaed"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""69ec6fa0-e0b0-43c6-ade8-0522a17134f7"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e8b0c12-88df-4821-832f-d105416a14e6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6d4193a-482c-4b9c-8362-084ad0d76996"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""951ca3be-0a8a-4e4d-9994-ed1906d6aa10"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ea40756-3403-4b43-a927-0fea2ae46a82"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""036558ba-c14f-462e-8107-79e03faf97fe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeaveFishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hook
        m_Hook = asset.FindActionMap("Hook", throwIfNotFound: true);
        m_Hook_Movement = m_Hook.FindAction("Movement", throwIfNotFound: true);
        m_Hook_Tug = m_Hook.FindAction("Tug", throwIfNotFound: true);
        m_Hook_Raise = m_Hook.FindAction("Raise", throwIfNotFound: true);
        m_Hook_LeaveFishing = m_Hook.FindAction("LeaveFishing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hook
    private readonly InputActionMap m_Hook;
    private IHookActions m_HookActionsCallbackInterface;
    private readonly InputAction m_Hook_Movement;
    private readonly InputAction m_Hook_Tug;
    private readonly InputAction m_Hook_Raise;
    private readonly InputAction m_Hook_LeaveFishing;
    public struct HookActions
    {
        private @FishingControls m_Wrapper;
        public HookActions(@FishingControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Hook_Movement;
        public InputAction @Tug => m_Wrapper.m_Hook_Tug;
        public InputAction @Raise => m_Wrapper.m_Hook_Raise;
        public InputAction @LeaveFishing => m_Wrapper.m_Hook_LeaveFishing;
        public InputActionMap Get() { return m_Wrapper.m_Hook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HookActions set) { return set.Get(); }
        public void SetCallbacks(IHookActions instance)
        {
            if (m_Wrapper.m_HookActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_HookActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnMovement;
                @Tug.started -= m_Wrapper.m_HookActionsCallbackInterface.OnTug;
                @Tug.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnTug;
                @Tug.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnTug;
                @Raise.started -= m_Wrapper.m_HookActionsCallbackInterface.OnRaise;
                @Raise.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnRaise;
                @Raise.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnRaise;
                @LeaveFishing.started -= m_Wrapper.m_HookActionsCallbackInterface.OnLeaveFishing;
                @LeaveFishing.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnLeaveFishing;
                @LeaveFishing.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnLeaveFishing;
            }
            m_Wrapper.m_HookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Tug.started += instance.OnTug;
                @Tug.performed += instance.OnTug;
                @Tug.canceled += instance.OnTug;
                @Raise.started += instance.OnRaise;
                @Raise.performed += instance.OnRaise;
                @Raise.canceled += instance.OnRaise;
                @LeaveFishing.started += instance.OnLeaveFishing;
                @LeaveFishing.performed += instance.OnLeaveFishing;
                @LeaveFishing.canceled += instance.OnLeaveFishing;
            }
        }
    }
    public HookActions @Hook => new HookActions(this);
    public interface IHookActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTug(InputAction.CallbackContext context);
        void OnRaise(InputAction.CallbackContext context);
        void OnLeaveFishing(InputAction.CallbackContext context);
    }
}
